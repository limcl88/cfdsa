# day 1

docker login 
docker logout

docker pull mysql:8 

docker build -t lcl1/my_fortune:v1 .
docker push lcl1/my_fortune:v1 

docker-machine env my-docker    
@FOR /f "tokens=*" %i IN ('docker-machine env my-docker') DO @%i

docker images
docker images rm xxx
docker ps
docker run -d -p 8080:3000 --name c0 lcl1/my_fortune:v1
docker exec -ti c0 bash
docker stop c0

docker volume ls
docker volume create myvol
docker run -d -p 3306:3306 --network mynet -v myvol:/vol/lib/mysql --name c1 lcl1/my_bgg:v1
docker inspect c1

docker network create mynet
docker network inspect mynet
docker network ls

docker run -d -p 3306:3306 bggdb --network mynet -v myvol:/var/lib/mysql lcl1/my_bgg:v1

#day 2

kebectl cluster-info

set KUBECONFIG="C:\Users\lcl88\Downloads\k8s-1-20-2-do-0-sgp1-1621388990097-kubeconfig.yaml"

kubectl get nodes

kubectl get all -n kube-system

kubectl get nodes -o wide

kubectl cluster-info dump

kubectl create namespace myns
kubectl get ns
kubectl describe ns/myns
kubectl delete ns/myns

kubectl apply -f fortune.yaml 
kubectl apply -f fortune.yaml -n myns
kubectl get po -n default
kubectl describe po/fortune-pod

kubectl exec -ti po/fortune-pod -n myns -- bash

kubectl port-forward po/fortune-pod 8081:3000

kubectl delete -f fortune.yaml -n myns

kubectl get rs/fortune-deploy-7f87ffddff -n myns

kubectl scale deploy/fortune-deploy --replicas=1 -n myns
kubectl get all -n myns

# to check ns resource limits (by default - unlimited
kubectl describe ns/myns 

kubectl describe svc/fortune-svc -n myns

kubectl get all,cm,secret -n myns